service: juanTorres

plugins:
  - serverless-iam-roles-per-function
  - serverless-offline

provider:
  name: aws
  region: us-east-1
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  environment:
    DYNAMOTABLE: ${self:service}-Client

functions:
  client:
    handler: create-client/handler/client.handler
    name: ${self:service}-${self:provider.stage}-create-client
    iamRoleStatements: 
      - Effect: Allow
        Action:
          - sns:Publish
        Resource:
          - !Ref CreateTopic
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource:
          - 'arn:aws:dynamodb:us-east-1:*:table/${self:service}-Client'
    events:
      - http:
          path: /client
          method: post
          cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - X-Amzn-Trace-Id
          allowCredentials: false

        
    environment:
      CLIENT_TOPIC: { Ref : CreateTopic}
  card:
    handler: create-card/handler/card.handler
    name: ${self:service}-${self:provider.stage}-create-card
    events:
      - sqs:
          arn: !GetAtt CardQueue.Arn
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "sqs:ReceiveMessage"
        Resource: !GetAtt CardQueue.Arn
      - Effect: 'Allow'
        Action:
          - 'dynamodb:UpdateItem'
        Resource:
          - 'arn:aws:dynamodb:us-east-1:*:table/${self:service}-Client'
  
  gift:
    handler: create-gift/handler/gift.handler
    name: ${self:service}-${self:provider.stage}-create-gift
    events:
      - sqs:
          arn: !GetAtt GiftQueue.Arn
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "sqs:ReceiveMessage"
        Resource: 
          - !GetAtt GiftQueue.Arn
      - Effect: 'Allow'
        Action:
          - 'dynamodb:UpdateItem'
        Resource:
          - 'arn:aws:dynamodb:us-east-1:*:table/${self:service}-Client'

resources:
  Resources:
    CreateTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Created Topic
        TopicName: ${self:service}-${self:provider.stage}-create-topic
        Subscription:
          - Protocol: sqs
            Endpoint: !GetAtt CardQueue.Arn
          - Protocol: sqs
            Endpoint: !GetAtt GiftQueue.Arn
    CardQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:service}-cardqueue
    CardQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties: 
        PolicyDocument: 
          Statement:
            - Effect: Allow
              Action: 
                - SQS:*
              Resource: !GetAtt CardQueue.Arn
              Principal:
                AWS:
                  - !Ref AWS::AccountId
            - Effect: Allow
              Principal:
                AWS: 
                  - '*'
              Action: 
                - SQS:SendMessage
              Resource: !GetAtt CardQueue.Arn
              Condition:
                ArnLike:
                  aws:SourceArn:
                    - !Ref CreateTopic
        Queues: 
          - !Ref CardQueue
    
    GiftQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:service}-giftqueue
    GiftQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties: 
        PolicyDocument: 
          Statement:
            - Effect: Allow
              Action: 
                - SQS:*
              Resource: !GetAtt GiftQueue.Arn
              Principal:
                AWS:
                  - !Ref AWS::AccountId
            - Effect: Allow
              Principal:
                AWS: 
                  - '*'
              Action: 
                - SQS:SendMessage
              Resource: !GetAtt GiftQueue.Arn
              Condition:
                ArnLike:
                  aws:SourceArn:
                    - !Ref CreateTopic
        Queues: 
          - !Ref GiftQueue